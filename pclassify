#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys, os, datetime, time, imp, argparse, EXIF

def GetDateFromExif(path):
    with open(path) as f:
        try:
            tag = "DateTimeOriginal"
            tags = EXIF.process_file(f, details=False, stop_tag=tag)
            if not tags.has_key('EXIF DateTimeOriginal'):
                return None
            
            return datetime.datetime.strptime(tags['EXIF DateTimeOriginal'].printable, '%Y:%m:%d %H:%M:%S')
        except:
            return None

def GetDateFromModifyTime(path):
    return datetime.datetime.strptime(time.strftime('%Y:%m:%d %H:%M:%S', time.localtime(os.stat(path).st_mtime)), '%Y:%m:%d %H:%M:%S')

def EnumPhotos(path):
    photoList = []
    
    fileList = os.listdir(path)
    for fileName in fileList:
        filePath = os.path.join(path, fileName)
        if not os.path.isfile(filePath):
            photoList += EnumPhotos(filePath)
            continue
        
        baseName, extName = os.path.splitext(fileName)
        extName = extName.lower()
        
        if extName!='.jpg' and extName!='.cr2' and extName!='.mp4' and extName!='.mov' and extName!='.3gp':
            continue
        
        photoList.append(filePath)

    return photoList

def MakeFolderByDate(superPath, date):
    dateString = datetime.datetime.strftime(date, '%Y-%m-%d')
    folderPath = os.path.join(superPath, dateString)
    
    if (not os.path.exists(folderPath)) or (not os.path.isdir(folderPath)):
        os.mkdir(folderPath)

    return folderPath

def MakeFolderByMonth(superPath, date):
    dateString = datetime.datetime.strftime(date, '%Y-%m')
    folderPath = os.path.join(superPath, dateString)
    
    if (not os.path.exists(folderPath)) or (not os.path.isdir(folderPath)):
        os.mkdir(folderPath)

    return folderPath

def MakeFolderByYear(superPath, date):
    dateString = datetime.datetime.strftime(date, '%Y')
    folderPath = os.path.join(superPath, dateString)
    
    if (not os.path.exists(folderPath)) or (not os.path.isdir(folderPath)):
        os.mkdir(folderPath)

    return folderPath

def MakeFolderByBirthday(superPath, date, fileName):
    mtYear = date.year
    mtMonth = date.month
    mtDay = date.day
    
    deltaYear = mtYear - 2011
    deltaMonth = mtMonth - 3

    monthAfterBirth = deltaYear * 12 + deltaMonth
    if mtDay>=16:
        monthAfterBirth += 1
        
    if monthAfterBirth<0:
        return None
    
    yearTag = monthAfterBirth / 12
    monthTag = monthAfterBirth % 12
    if monthTag==0:
        yearTag -= 1
        monthTag = 12
        
    dateString = ''
    baseName, extName = os.path.splitext(fileName)
    extName = extName.lower()
    if extName=='.jpg' or extName=='.cr2':
        dateString = '{0}岁{1}月照'.format(yearTag, monthTag)
    elif extName=='.mp4' or extName=='.mov' or extName=='.3gp':
        dateString = '{0}岁{1}月视频'.format(yearTag, monthTag)
    
    folderPath = os.path.join(superPath, dateString)
    
    if (not os.path.exists(folderPath)) or (not os.path.isdir(folderPath)):
        os.mkdir(folderPath)

    return folderPath
    
if __name__=='__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-c', action='store_true', dest='copyMode', default=False, help='copy file(s) from source to target(move file(s) by defualt)') 
    parser.add_argument('-f', action='store_true', dest='fullHashMode', default=False, help='use fullhash mode (more slower than default)') 
    parser.add_argument('-B', action='store_true', dest='birthdayMode', default=False, help='classify photos by Birthday')
    parser.add_argument('-m', action='store_true', dest='monthMode', default=False, help='classify photos by month')
    parser.add_argument('-y', action='store_true', dest='yearMode', default=False, help='classify photos by year')
    parser.add_argument('-d', action='store', dest='destPath', default='', help='specify destination folder for classified photos(use source path by default)')
    parser.add_argument('sourcePath', action='store', help='source path for photos to be classified')
    result = parser.parse_args()

    if(len(result.destPath)==0):
        result.destPath = result.sourcePath

    if(not os.path.exists(result.sourcePath)) or (not os.path.isdir(result.sourcePath)):
        print 'pclassify: error: {0}: No such file or directory'.format(result.sourcePath)
        sys.exit(1)

    if(not os.path.exists(result.destPath)) or (not os.path.isdir(result.destPath)):
        print 'pclassify: error: {0}: No such file or directory'.format(result.destPath)
        sys.exit(1)

    photoList = EnumPhotos(result.sourcePath)
    for photoFile in photoList:
        photoDate = GetDateFromExif(photoFile)
        
        if photoDate==None:
            photoDate = GetDateFromModifyTime(photoFile)
        
        folderPath = os.path.dirname(photoFile)
        
        if result.birthdayMode:    
            folderPath = MakeFolderByBirthday(result.destPath, photoDate, photoFile)
        elif result.monthMode:
            folderPath = MakeFolderByMonth(result.destPath, photoDate)
        elif result.yearMode:
            folderPath = MakeFolderByYear(result.destPath, photoDate)
        else:
            folderPath = MakeFolderByDate(result.destPath, photoDate)

        if folderPath==None:
            continue

        pcopy = imp.load_source('pcopy', os.path.join(os.path.dirname(os.path.realpath(__file__)), 'pcopy'))
        destPhotoPath = os.path.join(folderPath, os.path.basename(photoFile))
        pcopy.CopyFile(photoFile, destPhotoPath, not result.copyMode, result.fullHashMode)
